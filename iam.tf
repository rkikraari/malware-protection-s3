data "aws_iam_policy_document" "assume_role" {
  statement {
    effect = "Allow"

    principals {
      type        = "Service"
      identifiers = ["malware-protection-plan.guardduty.amazonaws.com"]
    }

    actions = ["sts:AssumeRole"]
  }
}

resource "aws_iam_role" "malware_protection_for_s3_role" {
  name               = "MalwareProtectionForS3"
  assume_role_policy = data.aws_iam_policy_document.assume_role.json
}

data "aws_iam_policy_document" "malware_protection_for_s3_policy_doc" {
  statement {
    sid    = "AllowManagedRuleToSendS3EventsToGuardDuty"
    effect = "Allow"
    actions = ["events:PutRule",
      "events:DeleteRule",
      "events:PutTargets",
    "events:RemoveTargets"]
    resources = ["arn:aws:events:${var.region}:${var.aws_account_id}:rule/DO-NOT-DELETE-AmazonGuardDutyMalwareProtectionS3*"]
    condition {
      test     = "StringLike"
      variable = "events:ManagedBy"
      values   = ["malware-protection-plan.guardduty.amazonaws.com"]

    }
  }
  statement {
    sid    = "AllowGuardDutyToMonitorEventBridgeManagedRule"
    effect = "Allow"
    actions = ["events:DescribeRule",
    "events:ListTargetsByRule"]
    resources = ["arn:aws:events:${var.region}:${var.aws_account_id}:rule/DO-NOT-DELETE-AmazonGuardDutyMalwareProtectionS3*"]
  }

  statement {
    sid    = "AllowPostScanTag"
    effect = "Allow"
    actions = ["s3:PutObjectTagging",
      "s3:GetObjectTagging",
      "s3:PutObjectVersionTagging",
    "s3:GetObjectVersionTagging"]
    resources = ["arn:aws:s3:::${aws_s3_bucket.test_malware_s3_bucket.id}/*"]
  }

  statement {
    sid    = "AllowEnableS3EventBridgeEvents"
    effect = "Allow"
    actions = ["s3:PutBucketNotification",
    "s3:GetBucketNotification"]
    resources = ["arn:aws:s3:::${aws_s3_bucket.test_malware_s3_bucket.id}"]
  }

  statement {
    sid       = "AllowPutValidationObject"
    effect    = "Allow"
    actions   = ["s3:PutObject"]
    resources = ["arn:aws:s3:::${aws_s3_bucket.test_malware_s3_bucket.id}/malware-protection-resource-validation-object"]
  }

  statement {
    effect    = "Allow"
    actions   = ["s3:ListBucket"]
    resources = ["arn:aws:s3:::${aws_s3_bucket.test_malware_s3_bucket.id}"]
  }

  statement {
    sid    = "AllowMalwareScan"
    effect = "Allow"
    actions = ["s3:GetObject",
    "s3:GetObjectVersion"]
    resources = ["arn:aws:s3:::${aws_s3_bucket.test_malware_s3_bucket.id}/*"]
  }

  statement {
    sid    = "AllowDecryptForMalwareScan"
    effect = "Allow"
    actions = ["kms:GenerateDataKey",
    "kms:Decrypt"]
    resources = [aws_kms_key.kms_for_malware_protection_s3_bucket.arn]
    condition {
      test     = "StringLike"
      variable = "kms:ViaService"
      values   = ["s3.${var.region}.amazonaws.com"]
    }
  }
}

resource "aws_iam_policy" "malware_protection_for_s3_policy" {
  name        = "MalwareProtectionForS3"
  description = "A policy for Malware Protection for S3"
  policy      = data.aws_iam_policy_document.malware_protection_for_s3_policy_doc.json
}

resource "aws_iam_role_policy_attachment" "attach_policy" {
  role       = aws_iam_role.malware_protection_for_s3_role.name
  policy_arn = aws_iam_policy.malware_protection_for_s3_policy.arn
}
